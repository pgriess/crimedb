o TODO

    . Filter out coordinates that we couldn't translate
    . Don't render polygons for areas for which we have no data. Need to
      differentiate this no data from no crime.
    . Error pages for API errors need to get built.
    . Cursor support
    . Cache in front of Solr/api. For the initial visualization/tooling we
      should get a pretty good hitrate, especially if we're normalizing queries
      relatively well.
    . API for returning aggregated results in buckets using facets. For the
      existing viz, no need to do these computations on the client.
    . The GPC algorithm (in JS at
      http://boontaran.com/posts/view/gpcjs_javascript_port_of_gpc) seems like a
      good candidate for performing polygon intersections, which is what is needed
      to draw a map that isn't pixelated at the edges
    . The ^ library is kind of janky (e.g. mucks w/ globals; doesn't allow
      embedding in a RequireJS/AMD module). Possibly use emscripten to 
      compile C reference implemtnation to asm.js

o Interesting data sources

    . http://www.slmpd.org/Crimereports.shtml
    . http://maps.stlouisco.com/police/
    . http://apps.sfgov.org/datafiles/index.php?dir=Police&by=name&order=asc
    . http://www.bjs.gov/ucrdata/Search/Crime/Crime.cfm
    . https://github.com/newsapps/chicagocrime
    . http://oakland.crimespotting.org/api

o Using Solr4

    . The base URL for API requests is http://localhost:8080/solr-4.3.0/crime

            . The Solr context is solr-4.3.0 based on the .war in webapps/

            . The CrimeDB index is hosted at /crime

    . Adding documents

        . Hit the /crime/update/json endpoint with a POST, Content-Type:
          application/json, and an array of JSON documents. Sending an object
          as the top-level type implies that we're doing a complex operation of
          adds/deletes/etc.

        . Set ?commit=true to force the update to be visible immediately

        . Set ?update.chain=id to have the 'id' update handler auto-populate the
          UUID 'id' field. This is configured in solrconfig.xml.

    . Querying documents

        . Hit the /crime/query endpoint with a GET and a ?q=<query> to search
          by the given query. This can't be empty (which will return no results).

        . To query all results, use '?q=*:*'

        . Geo points can be queried using syntax here:

            http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4

          However, be careful (when using Curl, at least) that a lot of that
          syntax has to be escaped. Be sure to run it through urlquote.

        . http://wiki.apache.org/solr/SearchHandler documents the set of
          query parameters for the /query endpoint

        . The solr/crime/conf/solrconfig.xml file maps handlers to URIs

o EC2

    . Centos 6.3 AMI

    . Built runit RPM via https://github.com/imeyer/runit-rpm

    . Built NodeJS RPM via https://github.com/kazuhisya/nodejs-rpm

    . Downloaded Jetty 9.0.x and dumped it in /opt/jetty

    . Build proj-4.8 from source. Didn't use pre-built RPM because couldn't
      find one with NAD support

        . Use http://download.osgeo.org/proj/proj-datumgrid-1.5.zip when
          building Proj (unzip and look at README.NADUS).

o Mac OS X

    . Install NodeJS via MacPorts

    . Install Proj-4.8 via MacPorts

    . Download Jetty 9.0.x; set $JETTY_HOME to its un-packed location

      Note that Jetty 9.1.x and above requires changes to start.ini, so stick
      with this for now to keep the configuration the same as what we use for
      CentOS.

    . Make sure that Java 7 is installed and in your $PATH

        $ java -version
        java version "1.7.0_51"
        Java(TM) SE Runtime Environment (build 1.7.0_51-b13)
        Java HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)
