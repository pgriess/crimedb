o TODO

    . Filter out coordinates that we couldn't translate
    . Don't render polygons for areas for which we have no data. Need to
      differentiate this no data from no crime.
    . Error pages for API errors need to get built.
    . Cursor support
    . Cache in front of Solr/api. For the initial visualization/tooling we
      should get a pretty good hitrate, especially if we're normalizing queries
      relatively well.
    . API for returning aggregated results in buckets using facets. For the
      existing viz, no need to do these computations on the client.

o Interesting data sources

    . http://www.slmpd.org/Crimereports.shtml
    . http://maps.stlouisco.com/police/
    . http://apps.sfgov.org/datafiles/index.php?dir=Police&by=name&order=asc
    . http://www.bjs.gov/ucrdata/Search/Crime/Crime.cfm
    . https://github.com/newsapps/chicagocrime
    . http://oakland.crimespotting.org/api

o Using Solr4

    . The Solr context is solr-4.3.0 based on the .war in webapps/

    . The CrimeDB index is hosted at /crime

    . Adding documents

        . Hit the /crime/update/json endpoint with a POST, Content-Type:
          application/json, and an array of JSON documents. Sending an object
          as the top-level type implies that we're doing a complex operation of
          adds/deletes/etc.

        . Set ?commit=true to force the update to be visible immediately

        . Set ?update.chain=id to have the 'id' update handler auto-populate the
          UUID 'id' field. This is configured in solrconfig.xml.

    . Querying documents

        . Hit the /crime/query endpoint with a GET and a ?q=<query> to search
          by the given query. This can't be empty (which will return no results).

        . Geo points can be queried using syntax here:

            http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4

          However, be careful (when using Curl, at least) that a lot of that
          syntax has to be escaped. Be sure to run it through urlquote.

o EC2

    . Centos 6.3 AMI

    . Built runit RPM via https://github.com/imeyer/runit-rpm

    . Built NodeJS RPM via https://github.com/kazuhisya/nodejs-rpm

    . Downloaded Jetty 9.x and dumped it in /opt/jetty

    . Build proj-4.8 from source. Didn't use pre-built RPM because couldn't
      find one with NAD support

        . Use http://download.osgeo.org/proj/proj-datumgrid-1.5.zip when
          building Proj (unzip and look at README.NADUS).
