#!/bin/env bash
#
# Copyright 2014 Peter Griess
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Sync directory tree to S3
#
# TODO:
#
#   - Change local mode to write symlinks to the destination directory
#     so that bin/push need only be run when new files are created

EXEC=$(basename $0)
CRIMEDB_ROOT=$(dirname $0)/..
WORKDIR=$(mktemp -d)

cleanup() {
    rm -fr $WORKDIR
}

do_sync() {
    local src=$1
    local dest=$2

    case $dest in
        s3://*)
            s3cmd -F -P -v sync \
                --delete-removed \
                $src/ $dest/
            ;;
        *)
            rsync -a --delete $src/ $dest/
            ;;
    esac
}

usage() {
    cat >&2 <<EOF
usage: $EXEC [options] <www-dest> <data-dest>

Puhes data from \$CRIMEDB_ROOT/root/www to <www-dest> and \$CRIMEDB_ROOT/root/data to
<data-dest>. The destinations can either be directory paths or s3:// URLs.

Options:
  -h                show help
EOF
}

trap cleanup EXIT

while getopts 'h' OPTNAME ; do
    case $OPTNAME in
        h)
            usage
            exit 0
            ;;
    esac
done

# Read path arguments, stripping trailing '/' characters. This is
# done for two reasons: S3 doesn't normalize URLs so '//foo' is
# not the same as '/foo'; and rsync behaves differently with a
# trailing slash.
if [[ $# -lt 1 ]] ; then
    echo >&2 "$EXEC: missing required www destination"
    usage
    exit 1
fi
dest_www=$(echo $1 | sed -e 's:/\+$::g')
shift

if [[ $# -lt 1 ]] ; then
    echo >&2 "$EXEC: missing required data destination"
    usage
    exit 1
fi
dest_data=$(echo $1 | sed -e 's:/\+$::g')
shift

if [[ $# -gt 0 ]] ; then
    usage
    echo >&2 "$EXEC: ignoring superfluous arguments"
    exit 1
fi

# Make sure that the $CRIMEDB_ROOT/root/data directory exists; there's
# no particular reason that it needs to. It's existence is just
# convention
if [[ ! -d $CRIMEDB_ROOT/root/data ]] ; then
    echo >&2 "$EXEC: \$CRIMEDB_ROOT/root/data does not exist"
    exit 1
fi

rsync -a \
    '--exclude=*.swp' \
    $CRIMEDB_ROOT/root/data $WORKDIR/

rsync -a \
    '--exclude=*.swp' \
    $CRIMEDB_ROOT/root/www $WORKDIR/

do_sync $CRIMEDB_ROOT/root/www $dest_www
do_sync $CRIMEDB_ROOT/root/data $dest_data
