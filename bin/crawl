#!/bin/env python3.3
#
# Copyright 2014 Peter Griess
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Crawl crime data and write YYYY-MM.json and index.json files to a directory.
#
# NOTES:
#
#   - The initial index.json file was constructed by running hapi/sv/run and
#     hitting /regions, then hand-editing the results. We should really port
#     the OSM code to Python and do the missouri-latest.osm manipulation
#     directly.

import argparse
from collections import defaultdict
import datetime
import functools
import json
import logging
import os.path
import pytz
import shapely.geometry
import sys
import time

# Add src/ directory to PYTHONPATH so that this can be run without the operator
# having to configure that manually
sys.path += [os.path.join(os.path.dirname(sys.argv[0]), '..', 'src')]

import crimedb.cli
import crimedb.core
import crimedb.geocoding
import crimedb.stl
import crimedb.stlco

UTC_TZ = pytz.timezone('UTC')

CRIME_ITERATORS = {
    'stl': crimedb.stl.crimes,
    'stlco': crimedb.stlco.crimes,
}


ap = argparse.ArgumentParser(
        description='''
Download crime data from original sources and transform it into CrimeDB JSON
files.
''',
        parents=[
            crimedb.cli.logging_argument_parser,
            crimedb.cli.config_argument_parser])
ap.add_argument('region_names', nargs='*', metavar='<region>',
                help=('fetch data from the given region (default: all '
                      'regions); use --list-regions to see a list of all '
                      'valid regions'))
ap.add_argument('--data-dir', metavar='<dir>',
                help='data directory (default: %(default)s)')
ap.add_argument('--work-dir', metavar='<dir>',
                help='work directory (default: %(default)s)')
ap.add_argument('--mapquest-api-key', metavar='<key>',
                help='set MapQuest API key')
ap.add_argument('--list-regions', action='store_true', default=None,
                help='list valid region names')
ap.add_argument('--no-download', action='store_true', default=None,
                help='do not download new data')

args = ap.parse_args()
crimedb.cli.process_logging_args(args)
crimedb.cli.process_config_args(args, defaults={
    'data_dir': 'data',
    'work_dir': 'work',
    'list_regions': False,
    'no_download': False})

if args.list_regions:
    for region_name in sorted(CRIME_ITERATORS):
        print('  {}'.format(region_name))
    sys.exit(0)

if not args.region_names:
    args.region_names = CRIME_ITERATORS.keys()
else:
    for region_name in args.region_names:
        if region_name not in CRIME_ITERATORS:
            print('invalid region: {}'.format(region_name), file=sys.stderr)
            sys.exit(1)

# Set up keyword arguments for crime iterators
kwargs = {
    'download': not args.no_download}

now = UTC_TZ.localize(
        datetime.datetime.fromtimestamp(
                time.mktime(time.gmtime())))

for region_name in args.region_names:
    work_dir = os.path.join(args.work_dir, region_name)
    data_dir = os.path.join(args.data_dir, region_name)

    with open(os.path.join(data_dir, 'index.json'), 'rt') as mf:
        meta_obj = json.load(mf)

    region_kwargs = kwargs.copy()

    region = shapely.geometry.shape(meta_obj['geo'])
    region_kwargs['region'] = region

    if args.mapquest_api_key:
        region_kwargs['geocoder'] = functools.partial(
                crimedb.geocoding.geocode_mapquest,
                args.mapquest_api_key,
                region=region)

    crimes_by_month_filenames = defaultdict(list)
    for c in CRIME_ITERATORS[region_name](work_dir, **region_kwargs):
        crimes_by_month_filenames[c.time.strftime('%Y-%m.json')] += [c]

    logging.info('sorting month data')
    for cm, cl in crimes_by_month_filenames.items():
        crimes_by_month_filenames[cm] = sorted(cl, key=lambda c: c.time)

    logging.info('writing month files')
    for fn, crimes in crimes_by_month_filenames.items():
        with open(os.path.join(data_dir, fn), 'wt') as mf:
            json.dump({
                    'update_time': now.strftime(
                            crimedb.core.RFC3999_STRFTIME_FORMAT),
                    'crimes': [crimedb.core.crime2json_obj(c) for c in crimes],
                },
                mf
            )

    logging.info('updating index.json')

    meta_obj['update_time'] = now.strftime(crimedb.core.RFC3999_STRFTIME_FORMAT)
    meta_obj['files'] = list(sorted(crimes_by_month_filenames.keys()))

    with open(os.path.join(data_dir, 'index.json'), 'wt') as mf:
        json.dump(meta_obj, mf)
