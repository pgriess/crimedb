#!/bin/env python3.3
#
# Copyright 2014 Peter Griess
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Crawl crime data and write YYYY-MM.json and index.json files to a directory.
#
# NOTES:
#
#   - The initial index.json file was constructed by running hapi/sv/run and
#     hitting /regions, then hand-editing the results. We should really port
#     the OSM code to Python and do the missouri-latest.osm manipulation
#     directly.

import argparse
from collections import defaultdict
import datetime
import functools
import json
import logging
import os.path
import pytz
import shapely.geometry
import sys
import time

# Add src/ directory to PYTHONPATH so that this can be run without the operator
# having to configure that manually
sys.path += [os.path.join(os.path.dirname(sys.argv[0]), '..', 'src')]

import crimedb.cli
import crimedb.core
import crimedb.geocoding
import crimedb.regions.dallas
import crimedb.regions.stl
import crimedb.regions.stlco

UTC_TZ = pytz.timezone('UTC')

NOW = UTC_TZ.localize(
        datetime.datetime.fromtimestamp(
                time.mktime(time.gmtime())))

CRIME_MODULES = {
    'dallas': crimedb.regions.dallas,
    'stl': crimedb.regions.stl,
    'stlco': crimedb.regions.stlco,
}


def cmd_download(args):
    for region_name in args.region_names:
        logging.info('downloading from region {}'.format(region_name))

        work_dir = os.path.join(args.work_dir, region_name)
        CRIME_MODULES[region_name].download(work_dir)


def cmd_process(args):
    geocoder = crimedb.geocoding.geocode_null
    if args.mapquest_api_key:
        geocoder = functools.partial(
                crimedb.geocoding.geocode_mapquest,
                args.mapquest_api_key,
                region=region)

    for region_name in args.region_names:
        logging.info('processing data from region {}'.format(region_name))

        work_dir = os.path.join(args.work_dir, region_name)
        data_dir = os.path.join(args.data_dir, region_name)

        meta_path = os.path.join(data_dir, 'index.json')
        with open(meta_path, 'rt') as mf:
            meta_obj = json.load(mf)

        region = shapely.geometry.shape(meta_obj['geo'])

        CRIME_MODULES[region_name].process(
                work_dir, geocoder=geocoder, region=region)


def cmd_collate(args):
    for region_name in args.region_names:
        logging.info('collating data from region {}'.format(region_name))

        work_dir = os.path.join(args.work_dir, region_name)
        data_dir = os.path.join(args.data_dir, region_name)

        meta_path = os.path.join(data_dir, 'index.json')
        with open(meta_path, 'rt') as mf:
            meta_obj = json.load(mf)

        crimes_by_month_filenames = defaultdict(list)
        for c in CRIME_MODULES[region_name].crimes(work_dir):
            if not c.time:
                continue

            crimes_by_month_filenames[c.time.strftime('%Y-%m.json')] += [c]

        logging.info('sorting month data for region {}'.format(region_name))
        for cm, cl in crimes_by_month_filenames.items():
            crimes_by_month_filenames[cm] = sorted(cl, key=lambda c: c.time)

        logging.info('writing month files for region {}'.format(region_name))
        for fn, crimes in crimes_by_month_filenames.items():
            with open(os.path.join(data_dir, fn), 'wt') as mf:
                json.dump({
                        'update_time': NOW.strftime(
                                crimedb.core.RFC3999_STRFTIME_FORMAT),
                        'crimes': [crimedb.core.crime2json_obj(c) for c in crimes],
                    },
                    mf
                )

        logging.info('updating index.json for region {}'.format(region_name))

        meta_obj['update_time'] = NOW.strftime(crimedb.core.RFC3999_STRFTIME_FORMAT)
        meta_obj['files'] = list(sorted(crimes_by_month_filenames.keys()))

        with open(os.path.join(data_dir, 'index.json'), 'wt') as mf:
            json.dump(meta_obj, mf)

    # Write a JSON file to the root of the data directory listing the set of datasets
    # available
    with open(os.path.join(args.data_dir, 'index.json'), 'wt') as mf:
        json.dump({'regions': list(args.region_names)}, mf)


ap = argparse.ArgumentParser(
        description='''
Download crime data from original sources and transform it into CrimeDB JSON
files.
''',
        parents=[
            crimedb.cli.logging_argument_parser,
            crimedb.cli.config_argument_parser])
ap.add_argument(
        '--data-dir', metavar='<dir>',
        help='data directory (default: %(default)s)')
ap.add_argument(
        '--work-dir', metavar='<dir>',
        help='work directory (default: %(default)s)')
ap.add_argument(
        '--region', metavar='<region>', default=[],
        action='append', dest='region_names',
        help='''
fetch data from the given region; can be specified multiple times to fetch from
multiple specific regions (default: all regions)
''')
sp = ap.add_subparsers()

download_parser = sp.add_parser(
        'download',
        help='download data for regions',
        description='''
Download data for regions for analysis by later stages of the crawling process.
''')
download_parser.set_defaults(func=cmd_download)

process_parser = sp.add_parser(
        'process',
        help='process downloaded data',
        description=''''
Process already-downloaded raw files from each region.
''')
process_parser.add_argument(
        '--mapquest-api-key', metavar='<key>',
        help='set MapQuest API key')
process_parser.set_defaults(func=cmd_process)

collate_parser = sp.add_parser(
        'collate',
        help='collate processed downloaded data',
        description=''''
Collalte processed data into YY-MM.json files.
''')
collate_parser.set_defaults(func=cmd_collate)


args = ap.parse_args()
crimedb.cli.process_logging_args(args)
crimedb.cli.process_config_args(args, defaults={
    'data_dir': 'data',
    'work_dir': 'work',
    'region_names': [],
})

if not args.region_names:
    args.region_names = CRIME_MODULES.keys()
else:
    for region_name in args.region_names:
        if region_name not in CRIME_MODULES:
            print('invalid region: {}'.format(region_name), file=sys.stderr)
            sys.exit(1)

# Make sure all directories have been created
for region_name in args.region_names:
    work_dir = os.path.join(args.work_dir, region_name)
    if not os.path.isdir(work_dir):
        os.makedirs(work_dir)

    data_dir = os.path.join(args.data_dir, region_name)
    if not os.path.isdir(data_dir):
        os.makedirs(data_dir)

if 'func' not in args:
    ap.error('command name required')

args.func(args)
