#!/bin/env node
/*
 * Slice apart a large OSM file into only the components necessary to represent
 * a single relation.
 */

var console = require('console');
var fs = require('fs');
var OSMParser = require('osm').Parser;

var reportProgress = function(osmParser) {
    var bytesParsed = 0;
    var reportProgress = function(_, pos) {
        diff = pos - bytesParsed;
        bytesParsed = pos;
        if (bytesParsed % 1024 <= diff) {
            console.error(new Date() + ' Parsed ' + Math.floor(bytesParsed / 1024) + 'KB');
        }
    };

    osmParser.on('node', reportProgress);
    osmParser.on('way', reportProgress);
    osmParser.on('relation', reportProgress);
};

var findRelations = function(path, rids, cb) {
    osmParser = new OSMParser();
   
    var osm = undefined;
    osmParser.on('osm', function(o) {
        osm = o;
    });

    var relations = [];
    osmParser.on('relation', function(r) {
        console.error('r.attributes.id = ' + r.attributes.id);
        if (r.attributes.id in rids) {
            relations.push(r);
        }
    });

    osmParser.on('end', function() {
        cb(osm, relations);
    });

    reportProgress(osmParser);

    osmParser.parseXMLStream(fs.createReadStream(path));
};

var findWays = function(path, wids, cb) {
    osmParser = new OSMParser();

    var ways = [];
    osmParser.on('way', function(w) {
        if (w.attributes.id in wids) {
            ways.push(w);
        }
    });

    osmParser.on('end', function() {
        cb(ways);
    });

    reportProgress(osmParser);

    osmParser.parseXMLStream(fs.createReadStream(osmPath));
};

var findNodes = function(path, nids, cb) {
    osmParser = new OSMParser();

    var nodes = [];
    osmParser.on('node', function(n) {
        if (n.attributes.id in nids) {
            nodes.push(n);
        }
    });

    osmParser.on('end', function() {
        cb(nodes);
    });

    reportProgress(osmParser);

    osmParser.parseXMLStream(fs.createReadStream(osmPath));
};

var writeOSM = function(osm, nodes, ways, relations) {
    console.log('<?xml version="1.0" encoding="UTF-8"?>');
    console.log('<osm version="' + osm.version + '">');

    var writeObj = function(obj, prefix, cb) {
        var attrString = '';
        for (var an in obj.attributes) {
            attrString += ' ' + an + '="' + obj.attributes[an] + '"';
        }
        console.log(prefix + '<' + obj.name + attrString + '>');
        if (cb) {
            cb();
        }
        if (obj.tags.length > 0) {
            console.log(
                Object.keys(obj.tags).map(function(k) {
                    return prefix + '  <tag ' +
                        'k="' + k + '" ' +
                        'v="' + obj.tags[k] + '"/>';
                }).join('\n')
            );
        }
        console.log(prefix + '</' + obj.name + '>');
    };

    nodes.forEach(function(n) { writeObj(n, '  '); });
    ways.forEach(function(w) {
        writeObj(w, '  ', function() {
            if (w.nodes.length > 0) {
                console.log(
                    w.nodes.map(function(nid) {
                        return '    <nd ref="' + nid + '"/>';
                    }).join('\n')
                );
            }
        });
    });
    relations.forEach(function(r) {
        writeObj(r, '  ', function() {
            if (r.ways.length > 0) {
                console.log(
                    r.ways.map(function(wid) {
                        return '    <member type="way" ref="' + wid + '"/>';
                    }).join('\n')
                );
            }
        });
    });

    console.log('</osm>');
}

if (process.argv.length < 3) {
    console.error('Missing required path to .osm file');
    process.exit(1);
}
var osmPath = process.argv[2];

if (process.argv.length < 4) {
    console.error('Missing required relation ID');
    process.exit(1);
}

var rids = {}
rids[process.argv[3]] = true;

console.error('Finding ' + Object.keys(rids).length + ' relations ...');
findRelations(osmPath, rids, function(osm, relations) {
    var wids = {};
    relations.forEach(function(r) {
        r.ways.forEach(function(wid) {
            wids[wid] = true;
        });
    });

    console.error('Finding ' + Object.keys(wids).length + ' ways ...');
    findWays(osmPath, wids, function(ways) {
        var nids = {}
        ways.forEach(function(w) {
            w.nodes.forEach(function(nid) {
                nids[nid] = true;
            });
        });

        console.error('Finding ' + Object.keys(nids).length + ' nodes ...');
        findNodes(osmPath, nids, function(nodes) {
            writeOSM(osm, nodes, ways, relations);
        });
    });
});

// vim:filetype=javascript
