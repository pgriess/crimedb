#!/bin/env python3
#
# Copyright 2014 Peter Griess
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Process raw CrimeDB data files and render optimized data for www.

import argparse
from collections import defaultdict
import datetime
import functools
import json
import logging
import math
import os
import os.path
import pystache
import pytz
import shapely.geometry
import shutil
import sys

# Add src/ directory to PYTHONPATH so that this can be run without the operator
# having to configure that manually
sys.path += [os.path.join(os.path.dirname(sys.argv[0]), '..', 'src')]

import crimedb.cli
import crimedb.core
import crimedb.regions.dallas
import crimedb.regions.stl
import crimedb.regions.stlco
import crimedb.www

# Grid size in lat/lon degrees
GRID_SIZE = 0.002

UTC_TZ = pytz.timezone('UTC')

MAX_ZOOM_LEVEL = 14
GRID_CELL_ZOOM_DEPTH = 3

CRIME_REGIONS = {
    'dallas': crimedb.regions.dallas.Region,
    'stl': crimedb.regions.stl.Region,
    'stlco': crimedb.regions.stlco.Region,
}


def call_per_region(region_dir, f):
    '''
    Run a function on every known region, calling it with a single argument:
    the name of the region.
    '''

    for rn in os.listdir(region_dir):
        if rn.startswith('.'):
            continue

        rp = os.path.join(region_dir, rn)
        if not os.path.isdir(rp):
            continue

        f(region_name=rn, region_path=rp)


def crimedb_filenames_for_date_range(begin, end):
    filenames = set()

    current_date = begin
    while current_date < end:
        filenames.add(current_date.strftime('%Y-%m.json'))
        current_date += datetime.timedelta(days=1)

    return filenames


def grid_for_region(args, region, region_dir, zoom):
    # Read crime data from date range
    crimes = []
    for fn in crimedb_filenames_for_date_range(args.time_from, args.time_to):
        fp = os.path.join(region_dir, fn)
        if not os.path.isfile(fp):
            continue

        def crime_filter(c):
            # Some crimes do not have a location (e.g. because they could not
            # be geocoded)
            if 'geo' not in c:
                return False

            # Crimes must be within the expected time range
            ct = datetime.datetime.strptime(
                    c['time'], crimedb.core.RFC3999_STRFTIME_FORMAT)
            if ct < args.time_from or ct > args.time_to:
                return False

            return True

        with open(fp, 'rt') as cf:
            all_crimes = json.load(cf)['crimes']
            filtered_crimes = [c for c in all_crimes if crime_filter(c)]
            logging.debug('grid_for_region: {} of {} crimes from {} matched time range'.format(
                len(filtered_crimes), len(all_crimes), fp))
            crimes += filtered_crimes

    grid = crimedb.www.grid_from_crimes(crimes, zoom)

    # Compute the range of (x, y) tile coordinates at our zoom level that are
    # within the region.
    #
    # NOTE: Since the Slippy map coordinate system has its origin at (-180W, +85N)
    #       the maximum latitude is our minimum Y value while the maximum longitude
    #       is our maximum X value.
    lon_min, lat_min, lon_max, lat_max = region.shape.bounds
    minx, maxy = crimedb.www.slippy_tile_coordinates_from_point(
            lon_min, lat_min, zoom)
    maxx, miny = crimedb.www.slippy_tile_coordinates_from_point(
            lon_max, lat_max, zoom)

    for x in range(minx, maxx + 1):
        for y in range(miny, maxy + 1):
            cell_shape = crimedb.www.bbox_from_slippy_tile_coordinates(x, y, zoom)
            if region.shape.intersects(cell_shape) and \
                    y not in grid[x]:
                grid[x][y] += 0

    return grid


def render_grid(args):
    '''
    Render JSON files for the data-grid/ output directory.
    '''

    initial_zoom_level = MAX_ZOOM_LEVEL + GRID_CELL_ZOOM_DEPTH
    grid = crimedb.www.grid_from_crimes([], initial_zoom_level)
    for rn in os.listdir(args.data_dir):
        rp = os.path.join(args.data_dir, rn)
        if not os.path.isdir(rp):
            continue

        logging.info('Reading raw data for {}'.format(rn))
        region = CRIME_REGIONS[rn]()
        region_grid = grid_for_region(args, region, rp, initial_zoom_level)
        grid = crimedb.www.grid_add(grid, region_grid)

    zgrid = crimedb.www.zgrid_from_grid(grid, initial_zoom_level, 0)
    rzgrid = crimedb.www.rzgrid_from_zgrid(zgrid, GRID_CELL_ZOOM_DEPTH)

    for z, xgrids in rzgrid.items():
        for x, ygrids in xgrids.items():
            for y, grid in ygrids.items():
                dp = os.path.join(args.output_dir, 'grid-data', str(z), str(x))
                if not os.path.isdir(dp):
                    os.makedirs(dp)
                gjo = crimedb.www.rzgrid_to_geojson(rzgrid, x, y, z, GRID_CELL_ZOOM_DEPTH)
                with open(os.path.join(dp, '{}.json'.format(y)), 'wt', encoding='utf-8') as of:
                    json.dump(gjo, of)


def render_global_templates(args):
    '''
    Render files from the _templates/ directory (but ommitting the r/
    subdirectory).
    '''

    # Create our pystache context object
    regions = []
    for rn in os.listdir(args.data_dir):
        if rn.startswith('.'):
            continue

        if not os.path.isdir(os.path.join(args.data_dir, rn)):
            continue


        region = CRIME_REGIONS[rn]()

        regions += [{
            'name': region.name,
            'human_name': region.human_name,
            'human_url': region.human_url,
        }]

    context = {
        'regions': regions
    }

    # Walk the template directory rendering any template files to the
    # destination
    template_path = os.path.join(args.www_dir, '_templates')
    for root, dirs, files in os.walk(template_path):
        if root == template_path:
            del dirs[dirs.index('_r')]

        for fn in files:
            if fn.startswith('.'):
                continue

            sp = os.path.join(root, fn)
            logging.debug('loading template {}'.format(sp))
            with open(sp, 'rt', encoding='utf-8') as sf:
                source_data = sf.read()

            rp = os.path.relpath(sp, template_path)
            dp = os.path.join(args.output_dir, rp)
            if not os.path.isdir(os.path.dirname(dp)):
                os.makedirs(os.path.dirname(dp))

            with open(dp, 'wt', encoding='utf-8') as df:
                df.write(pystache.render(source_data, context))


def render_region_timeseries(args, region_name, region_path, **kwargs):
    '''
    Render JSON files to be used for rendering a HighCharts timeseries in the
    /r/<region>/index.html page and write it to /r/<region>/timeseries.json.
    '''

    # Read crime data from date range
    crimes = []
    for fn in crimedb_filenames_for_date_range(args.time_from, args.time_to):
        fp = os.path.join(region_path, fn)
        if not os.path.isfile(fp):
            continue

        def crime_filter(c):
            ct = datetime.datetime.strptime(
                    c['time'], crimedb.core.RFC3999_STRFTIME_FORMAT)
            return ct >= args.time_from and ct <= args.time_to

        with open(fp, 'rt') as cf:
            all_crimes = json.load(cf)['crimes']
            filtered_crimes = [c for c in all_crimes if crime_filter(c)]
            crimes += filtered_crimes

            logging.debug('render_region_timeseries: {} of {} crimes from {} matched time range'.format(
                len(filtered_crimes), len(all_crimes), fp))

    crimes_by_month = defaultdict(lambda: [0] * 12)
    crimes_by_weekday = defaultdict(lambda: [0] * 7)
    for c in crimes:
        ct = datetime.datetime.strptime(
                c['time'], crimedb.core.RFC3999_STRFTIME_FORMAT)
        crimes_by_month[ct.strftime('%Y')][ct.month - 1] += 1
        crimes_by_weekday[ct.strftime('%Y')][ct.weekday() - 1] += 1

    # Render the JSON output file
    jo = {
        'by_month': {
            'chart': {
                'type': 'line',
            },
            'title': {
                'text': 'Crimes by Month',
            },
            'xAxis': {
                'categories': [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec',
                ],
            },
            'yAxis': {
                'title': {
                    'text': 'Number of crimes',
                },
            },
            'series': [
                {'name': x, 'data': crimes_by_month[x]} for x in crimes_by_weekday],
        },
        'by_weekday': {
            'chart': {
                'type': 'line',
            },
            'title': {
                'text': 'Crimes by Weekday',
            },
            'xAxis': {
                'categories': [
                    'Mon',
                    'Tue',
                    'Wed',
                    'Thu',
                    'Fri',
                    'Sat',
                    'Sun',
                ],
            },
            'yAxis': {
                'title': {
                    'text': 'Number of crimes',
                },
            },
            'series': [
                {'name': x, 'data': crimes_by_weekday[x]} for x in crimes_by_weekday],
        },
    }

    dp = os.path.join(args.output_dir, 'r', region_name)
    if not os.path.isdir(dp):
        os.makedirs(dp)
    with open(os.path.join(dp, 'timeseries.json'), 'wt', encoding='utf-8') as tf:
        json.dump(jo, tf)


def render_region_templates(args, region_name, region_path, **kwargs):
    '''
    Render files from the _templates/r/ directory
    '''

    # Create our pystache context object
    ip = os.path.join(region_path, 'index.json')
    with open(ip, 'rt', encoding='utf-8') as rf:
        ro = json.load(rf, encoding='utf-8')

    rs = shapely.geometry.shape(ro['geo'])

    context = {
        'region': region_name,
        'name': ro['name'],
        'timeslice': 'from {} to {}'.format(
                args.time_from.strftime('%B %d, %Y'),
                args.time_to.strftime('%B %d, %Y')),
        'source': ro['source'],
        'center_lon': rs.centroid.x,
        'center_lat': rs.centroid.y,
    }

    # Walk the template directory rendering any template files to the
    # destination
    template_path = os.path.join(args.www_dir, '_templates', '_r')
    for root, dirs, files in os.walk(template_path):
        for fn in files:
            if fn.startswith('.'):
                continue

            sp = os.path.join(root, fn)
            logging.debug('loading template {}'.format(sp))
            with open(sp, 'rt', encoding='utf-8') as sf:
                source_data = sf.read()

            rp = os.path.relpath(sp, template_path)
            dp = os.path.join(args.output_dir, 'r', region_name, rp)
            if not os.path.isdir(os.path.dirname(dp)):
                os.makedirs(os.path.dirname(dp))

            with open(dp, 'wt', encoding='utf-8') as df:
                df.write(pystache.render(source_data, context))


ap = argparse.ArgumentParser(
        description='''
Download crime data from original sources and transform it into CrimeDB JSON
files.
''',
        parents=[
            crimedb.cli.logging_argument_parser,
            crimedb.cli.config_argument_parser])
ap.add_argument('--time-from', type=int, default=None, metavar='<secs>',
                help='''
Render crimes occurring after this time in epoch seconds UTC (default: one
month ago)
''')
ap.add_argument('--time-to', type=int, default=None, metavar='<secs>',
                help='''
Render crimes occurring before this time in epoch seconds UTC (default: now)
''')

ap.add_argument(
    'data_dir', metavar='<data-dir>',
    help=('''
read CrimeDB JSON raw data files from this directory; should contain a
subdirectory for each region
'''))
ap.add_argument(
    'www_dir', metavar='<www-dir>',
    help=('''
read www files from this directory
'''))
ap.add_argument(
    'output_dir', metavar='<output-dir>',
    help=('''
write www files to this directory
'''))

args = ap.parse_args()
crimedb.cli.process_logging_args(args)
crimedb.cli.process_config_args(args, defaults={})

if args.time_to is None:
    args.time_to = UTC_TZ.localize(datetime.datetime.utcnow())
else:
    args.time_to = UTC_TZ.localize(
            datetime.datetime.utcfromtimestamp(args.time_to))

if args.time_from is None:
    args.time_from = UTC_TZ.localize(
            datetime.datetime.utcnow() - datetime.timedelta(30))
else:
    args.time_from = UTC_TZ.localize(
            datetime.datetime.utcfromtimestamp(args.time_from))

# Clean out any old contents from the destination directory
if os.path.exists(args.output_dir):
    shutil.rmtree(args.output_dir)

# Symlink file in the www directory into the destination.
#
# By convention, ignore any directories that start with our special '_' prefix.
# We use this instead of the normal '.' so that these directories are more
# obviously visible via ls(1) and under source control.
for dp, dnames, fnames in os.walk(args.www_dir, topdown=True):
    # Strip paths prefixed with '_'
    dnames[:] = [dn for dn in dnames if not dn.startswith('_')]
    fnames[:] = [fn for fn in fnames if not fn.startswith('_')]

    rd = os.path.relpath(dp, args.www_dir)
    od = os.path.join(args.output_dir, rd)
    sd = os.path.relpath(dp, od)

    if not os.path.isdir(od):
        os.makedirs(od)

    for fn in fnames:
        src = os.path.join(sd, fn)
        dest = os.path.join(od, fn)
        os.symlink(src, dest)

render_grid(args)
render_global_templates(args)
call_per_region(args.data_dir, functools.partial(render_region_timeseries, args))
call_per_region(args.data_dir, functools.partial(render_region_templates, args))
