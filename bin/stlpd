#!/bin/env node
/*
 * Initialize a Solr instance with data from the St. Louis Police Department
 * via http://www.slmpd.org/Crimereports.shtml.
 *
 * XXX: Need to handle errors that don't have reason fields (e.g. those that
 *      come from somewhere other than CouchDB).
 */

var console = require('console');
var crimedb_geo = require('crimedb/geo');
var csv = require('csv');
var optimist = require('optimist');
var request = require('request');
var strptime = require('micro-strptime').strptime;

/*
 * Import a CSV file into the given database.
 *
 * Note that even if we encounter an error along the way, this function will
 * attempt to import all rows from the CSV file before reporting the error via
 * the callback.
 */
var importCSVFile = function(solrUrl, csvPath, callback) {
    var min = function(a, b) { return a > b ? b : a; };
    var cols = null;
    var docBatch = [];
    var doneParsing = false;
    var outstandingAdds = 0;
    var callbackErr = null;

    var transformXYCoord = function(idoc, odoc) {
        crimedb_geo.spcsToLatLong(
            2401, idoc['X-Coord'], idoc['Y-Coord'], 'us-ft',
            function(err, gjo) {
                if (err) {
                    callback(err);
                    return;
                }

                // TODO: later
                // odoc['location'] = gjo;

                docBatch.push(odoc);
                checkFlush(false);
            }
        );
    };

    var checkFlush = function(forceFlush) {
        if (forceFlush || docBatch.length >= 10) {
            ++outstandingAdds;

            request({
                url: solrUrl + '/update/json',
                qs: {'update.chain': 'id'},
                method: 'POST',
                json: docBatch},
                function(err, resp, respBody) {
                    --outstandingAdds;
                    callbackErr = callbackErr || err;

                    if (outstandingAdds == 0 && doneParsing) {
                        callback(callbackErr);
                    }
                }
            );
            docBatch = [];
        }
    };

    csv().from(csvPath)
        .on('record', function(rec) {
            /* Grab the column names from the first record */
            if (!cols) {
                cols = rec;
                return;
            }

            /* Construct our object by mapping column names to values */
            var idoc = {};
            for (var i = 0; i < min(rec.length, cols.length); ++i) {
                idoc[cols[i]] = rec[i].trim();
            }

            /*
             * Perform transformations on our input data to well-kown formats.
             * Do synchronous transforms first, as it's easier.
             */
            var odoc = {};
            odoc['description'] = idoc['Description'];

            date = strptime(idoc['Date Occured'], '%m/%d/%Y %H:%M')
            odoc['date'] =
                date.getUTCFullYear() + '-' +
                (date.getMonth() + 1) + '-' +
                date.getUTCDate() +
                'T' +
                date.getUTCHours() + ':' +
                date.getUTCMinutes() + ':' +
                date.getUTCSeconds() +
                'Z';

            /* Perform asynchronous transformations */
            transformXYCoord(idoc, odoc);
        }).on('end', function(count) {
            doneParsing = true;
            checkFlush(true);
        }).on('error', function(err) {
            callbackErr = callbackErr || err;
            doneParsing = true;
            checkFlush(true);
        });
};

/*
 * Import many CSV files into the given database.
 */
var importCSVFiles = function(solrUrl, csvPaths, callback) {
    if (csvPaths.length == 0) {
        callback(null);
        return;
    }

    var csvPath = csvPaths.shift();
    importCSVFile(solrUrl, csvPath, function(err) {
        if (err) {
            console.log('Error importing ' + csvPath);
            callback(err);
        } else {
            console.log('Successfully imported ' + csvPath);
            importCSVFiles(solrUrl, csvPaths, callback);
        }
    });
};

var opts = optimist.options({
    help: {
        alias: 'h',
        boolean: true,
        describe: 'show help'},
    solr: {
        default: 'http://localhost:8080/solr-4.3.0/crime',
        describe: 'the Solr instance to connect to'},
    clear: {
        boolean: true,
        describe: 'clear the database before importing'}})
    .usage('\
usage: $0 <path>\n\
\n\
Imports the file at <path> into the Solr index.\
').wrap(80);
var args = opts.argv;

if (args.h) {
    opts.showHelp(console.log);
    process.exit(0);
}

if (args._.length < 1) {
    console.error('missing required <path> argument\n');
    opts.showHelp();
    process.exit(1);
}

importCSVFiles(args.solr, args._, function(err) {
    if (err) {
        throw err;
    }
});

// vim:filetype=javascript
