#!/bin/env python3.3
#
# Copyright 2014 Peter Griess
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Work with CrimeDB region files.

import argparse
import collections
import contextlib
import json
import logging
import lxml.etree
import pystache
import os.path
import pprint
import shapely.geometry
import subprocess
import sys
import tempfile

# Add src/ directory to PYTHONPATH so that this can be run without the operator
# having to configure that manually
sys.path += [os.path.join(os.path.dirname(sys.argv[0]), '..', 'src')]

import crimedb.cli
import crimedb.debug

def create_cmd(args):
    crimedb.cli.process_logging_args(args)

    with open(args.path, 'rt', encoding='utf-8') as f:
        gjo = json.load(f)

    region = {
        'geo': gjo,
    }

    if 'osm' in gjo and 'name' in gjo['osm']:
        region['name'] = gjo['osm']['name']

    sys.stdout.write(
            json.dumps(
                region,
                ensure_ascii=False,
                indent=4,
                sort_keys=True))
    sys.stdout.write('\n')


def view_cmd(args):
    crimedb.cli.process_logging_args(args)

    with open(args.path, 'rt', encoding='utf-8') as f:
        ro = json.load(f)


    crimedb.debug.view_geojson_objects(ro['geo'])


ap = argparse.ArgumentParser(
        description='Work with CrimeDB region files.',
        parents=[crimedb.cli.logging_argument_parser])
sp = ap.add_subparsers()

create_parser = sp.add_parser(
        'create',
        help='create a new region file from a GeoJSON file',
        description='''
Create a new region file from a GeoJSON file. The resulting region file is
written to stdout.
''')
create_parser.add_argument(
        'path', metavar='<path>',
        help='path to the GeoJSON file to use as a source for our region')
create_parser.set_defaults(func=create_cmd)

view_parser = sp.add_parser(
        'view',
        help='view a region file')
view_parser.add_argument(
        'path', metavar='<path>',
        help='path to the region file to view')
view_parser.set_defaults(func=view_cmd)

args = ap.parse_args()
if 'func' not in args:
    ap.error('command name required')

args.func(args)
