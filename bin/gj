#!/bin/env python3.3
#
# Copyright 2014 Peter Griess
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Work with GeoJSON files.

import argparse
import json
import os.path
import pystache
import shapely.geometry
import subprocess
import sys
import tempfile

# Add src/ directory to PYTHONPATH so that this can be run without the operator
# having to configure that manually
sys.path += [os.path.join(os.path.dirname(sys.argv[0]), '..', 'src')]

import crimedb.cli

def view_cmd(args):
    with open(args.gj_path, 'rt', encoding='utf-8') as gjf:
        gjo = json.load(gjf)

    html_content = '''
<html>
    <head>
        <title>{{tags.name}}</title>

        <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/>
        <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.0/themes/smoothness/jquery-ui.css" />

        <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"></script>
        <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.0/jquery-ui.min.js"></script>
        <script src="http://maps.stamen.com/js/tile.stamen.js?v1.3.0"></script>

        <style type="text/css">
            #map {
                height: 90%;
            }
        </style>

        <script type="text/javascript">
            var POLYGON = {
                type: 'Polygon',
                coordinates: [[
                    {{#coordinates}}
                        [{{lon}}, {{lat}}],
                    {{/coordinates}}
                ]],
            };

            $(function() {
                var map = L.map('map');

                map.addLayer(new L.StamenTileLayer('toner'));
                map.addLayer(
                    L.geoJson(POLYGON, {
                        style: { color: 'blue' },
                    })
                );
                map.setView([{{center.lat}}, {{center.lon}}], {{zoom}});
            });
        </script>
    </head>

    <body>
        <div id="map"/>
    </body>
</html>
    '''

    with tempfile.TemporaryDirectory() as temp_dir:
        view_path = os.path.join(temp_dir, 'view.html')
        shape = shapely.geometry.shape(gjo)
        centroid = shape.centroid

        context = {
            'coordinates':
                [{'lon': c[0], 'lat': c[1]} for c in gjo['coordinates'][0]],
            'center': {'lon': centroid.x, 'lat': centroid.y},
            'zoom': 10,
        }
        with open(view_path, 'wt', encoding='utf-8') as f:
            f.write(pystache.render(html_content, context))

        rc = subprocess.call(['open', view_path])
        if rc:
            logging.error('view failed with exit code {}'.format(rc))
            sys.exit(rc)

        input('Press <enter> to exit application\n')


ap = argparse.ArgumentParser(
        description='Work with CrimeDB region files.',
        parents=[crimedb.cli.logging_argument_parser])
sp = ap.add_subparsers()

view_parser = sp.add_parser(
        'view',
        help='view GeoJSON objects',
        description='View GeoJSON objects in a webpage')
view_parser.add_argument(
        'gj_path', metavar='<file>',
        help='path to the GeoJSON file to view')
view_parser.set_defaults(func=view_cmd)

args = ap.parse_args()
crimedb.cli.process_logging_args(args)

if 'func' not in args:
    ap.error('command name required')

args.func(args)
