#!/bin/env python3.3
#
# Copyright 2014 Peter Griess
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Work with GeoJSON files.

import argparse
import functools
import json
import logging
import os.path
import pystache
import shapely.geometry
import subprocess
import sys
import tempfile

# Add src/ directory to PYTHONPATH so that this can be run without the operator
# having to configure that manually
sys.path += [os.path.join(os.path.dirname(sys.argv[0]), '..', 'src')]

import crimedb.cli
import crimedb.debug

def view_cmd(args):
    with open(args.gj_path, 'rt', encoding='utf-8') as gjf:
        gjo = json.load(gjf)

    crimedb.debug.view_geojson_objects(gjo)


def transform_cmd(args):
    def diff_transform(path, so):
        with open(path, 'rt', encoding='utf-8') as f:
            diff_so = shapely.geometry.shape(json.load(f))

        return so.difference(diff_so)

    with open(args.gj_path, 'rt', encoding='utf-8') as gjf:
        so = shapely.geometry.shape(json.load(gjf))

    i = 0
    transformations = []
    while i < len(args.commands):
        if args.commands[i] == '-diff':
            i += 1
            transformations += [functools.partial(diff_transform, args.commands[i])]
        else:
            raise Exception('unknown command: {}'.format(args.commands[i]))

        i += 1

    so = functools.reduce(lambda gjo, f: f(gjo), transformations, so)
    json.dump(
            shapely.geometry.mapping(so),
            sys.stdout,
            ensure_ascii=False,
            indent=4,
            sort_keys=True)


ap = argparse.ArgumentParser(
        description='Work with CrimeDB region files.',
        parents=[crimedb.cli.logging_argument_parser])
sp = ap.add_subparsers()

view_parser = sp.add_parser(
        'view',
        help='view GeoJSON objects',
        description='View GeoJSON objects in a webpage')
view_parser.add_argument(
        'gj_path', metavar='<file>',
        help='path to the GeoJSON file to view')
view_parser.set_defaults(func=view_cmd)

transform_parser = sp.add_parser(
    'transform',
    help='transform GeoJSON objects',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description='''
Transform GeoJSON objects. Transformations are applied in the order specified.
Due to the way argparse handles arguments, you will have to provide a '--'
positional argument immediately after the <path> argument in order to get the
behavior desired.

Possible transformations and their arguments are:

  -diff <path>          Subtract the GeoJSON object from the given path from the
                        current object
''')
transform_parser.add_argument(
    'gj_path', metavar='<path>',
    help='path to base GeoJSON file')
transform_parser.add_argument(
    'commands', nargs='*',
    help='set of transformations to apply')
transform_parser.set_defaults(func=transform_cmd)

args = ap.parse_args()
crimedb.cli.process_logging_args(args)

if 'func' not in args:
    ap.error('command name required')

args.func(args)
