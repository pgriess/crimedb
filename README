o Interesting data sources

    . http://www.slmpd.org/Crimereports.shtml
    . http://maps.stlouisco.com/police/
    . http://apps.sfgov.org/datafiles/index.php?dir=Police&by=name&order=asc
    . http://www.bjs.gov/ucrdata/Search/Crime/Crime.cfm
    . https://github.com/newsapps/chicagocrime
    . http://oakland.crimespotting.org/api

o Storage

    . CouchDB doesn't really support multi-term indexing very well. Given that
      documents are small, Solr4 (which supports geospatial queries) may be a
      better fit since we can store the documents in the index.

        . Solr expects an out-of-band index publication system (i.e. no
          live udpates of documents). This is fine w/ me since we'd want
          to generate this stuff offline anyway.

        . This would also fit reasonbly well into a system that generates
          multiple artifacts (Solr index, CSV files, etc)

o API

    . Crime object

        . time -- epoch timestamp in seconds, GMT

        . location -- GeoJSON

        . description -- textual description of event

    . Result envelope

        . Keys from http://tools.ietf.org/html/draft-nottingham-http-problem-04
          to indicate problems

            . problemType

            . title

        . results -- key for results array

        . cursor -- cursor to provide to a subsequent request to continue
                    iterating over the result set

    . Initially, only searchable/sortable by timestamp (since Couch doesn't
      have good support for multi-key indices).

    . http://api.crimedb.org/crimes?
        . time=[NNN:MMM] -- time range to query, range of [NNN, MMM)
        . limit=NNN -- maximum number of results
        . cursor=XXX -- opaque cursor returned by previous query

o Server implementation

    . Requirements

        . Backend of some variety

        . Web server to perform transformations between external API and storage
          engine

        . Web server to host static content (e.g. API docs, eventually bulk
          downloads)

        . Access logs

        . Some sort of analytics

    . Implementation

        . CouchDB for storage, queries

        . NodeJS / Hapi for web server, static file serving, access logging

            . Use streaming JSON parser to do transforms; one exists for
              NodeJS, but it might suck

        . Google Analytics

o Using Solr4

    . The Solr context is solr-4.3.0 based on the .war in webapps/

    . The CrimeDB index is hosted at /crime

    . Adding documents

        . Hit the /crime/update/json endpoint with a POST, Content-Type:
          application/json, and an array of JSON documents. Sending an object
          as the top-level type implies that we're doing a complex operation of
          adds/deletes/etc.

        . Set ?commit=true to force the update to be visible immediately

        . Set ?update.chain=id to have the 'id' update handler auto-populate the
          UUID 'id' field. This is configured in solrconfig.xml.

    . Querying documents

        . Hit the /crime/query endpoint with a GET and a ?q=<query> to search
          by the given query. This can't be empty (which will return no results).

        . Geo points can be queried using syntax here:

            http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4

          However, be careful (when using Curl, at least) that a lot of that
          syntax has to be escaped. Be sure to run it through urlquote.
